name: CI

on: # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  pull_request: ~

env:
  DEFAULT_PYTHON: "3.12"
  DEFAULT_NODE: "20"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  checks:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: mypy
            command: poetry run mypy .
          - name: Prettier
            command: prettier --check .
          - name: Pylint
            command: poetry run pylint src tests
          - name: Ruff linter
            command: poetry run ruff check --output-format=github .
          - name: Ruff formatter
            command: poetry run ruff format --check .
          - name: YamlLint
            command: poetry run yamllint .
    runs-on: ubuntu-latest
    name: ${{ matrix.name }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4

      - name: Setup Poetry
        run: pipx install poetry

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: poetry

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.DEFAULT_NODE }}

      - name: Setup env
        run: |
          ./scripts/setup_env.sh

      - name: Run ${{ matrix.name }}
        run: ${{ matrix.command }}

  tests:
    runs-on: ubuntu-latest
    needs:
      - checks
    name: Run tests
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4

      - name: Setup Poetry
        run: pipx install poetry

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: poetry

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.DEFAULT_NODE }}

      - name: Setup env
        run: |
          ./scripts/setup_env.sh

      - name: Run tests
        run: poetry run pytest

      - name: Make coverage XML report
        run: poetry run coverage xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: SonarCloud Scan
        if: github.event.pull_request.head.repo.fork == false
        uses: sonarsource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
